"""
Django settings for fm_eventmanager project.

Generated by 'django-admin startproject' using Django 1.9.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import logging
from idempotency_key import status

eval_bool = lambda x: x.lower() in ('true', '1', 't', 'y', 'yes')

if eval_bool(os.environ.get("SENTRY_ENABLED")):
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration

    sentry_sdk.init(
        dsn=os.environ["SENTRY_DSN"],
        integrations=[DjangoIntegration()],

        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for performance monitoring.
        # We recommend adjusting this value in production,
        traces_sample_rate=float(os.environ.get("SENTRY_TRACES_SAMPLE_RATE", 0.01)),

        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True,

        # By default the SDK will try to use the SENTRY_RELEASE
        # environment variable, or infer a git commit
        # SHA as release, however you may want to set
        # something more human-readable.
        # release="myapp@1.0.0",

        auto_session_tracking=False,
    )

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['DJANGO_SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', False)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        '': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
    },
}

# Get loglevel from env
LOGLEVEL = os.getenv('DJANGO_LOGLEVEL', 'info').upper()

ADMINS = [(os.getenv("APIS_ADMIN_NAME", "Super Adminton"), os.getenv("APIS_ADMIN_EMAIL", "admin@example.com")),]
SERVER_EMAIL = os.getenv("DJANGO_SERVER_EMAIL", "no-reply@example.com")

ALLOWED_HOSTS = ['*']

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Application definition

INSTALLED_APPS = [
    'django_admin_env_notice',
    'flat_responsive',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'widget_tweaks',
    'mathfilters',
    'nested_inline',
    'import_export',
    'django_extensions',
    'django_u2f',
    'argonauts',
    'maintenance_mode',
    'registration',
    'debug_toolbar',
    'django_prometheus',
]

MIDDLEWARE = [
    'django_prometheus.middleware.PrometheusBeforeMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'idempotency_key.middleware.ExemptIdempotencyKeyMiddleware',
    'maintenance_mode.middleware.MaintenanceModeMiddleware',
    'django_prometheus.middleware.PrometheusAfterMiddleware',
]

ROOT_URLCONF = 'fm_eventmanager.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'maintenance_mode.context_processors.maintenance_mode',
                'registration.context_processors.square_environment',
                'django_admin_env_notice.context_processors.from_settings',
            ],
        },
    },
]

WSGI_APPLICATION = 'fm_eventmanager.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django_prometheus.db.backends.postgresql',
        'NAME': os.getenv('DATABASE_NAME', 'apis'),
        'USER': os.getenv('DATABASE_USER', 'apis'),
        'PASSWORD': os.getenv('DATABASE_PASS', 'secret'),
        'HOST': os.getenv('DATABASE_HOST'),
        'PORT': os.getenv('DATABASE_PORT', ''),
    }
}


# Cache
# https://docs.djangoproject.com/en/2.2/topics/cache/

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.getenv("DJANGO_REDIS_URL", "redis://redis:6379/1"),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}


# Prometheus metrics
PROMETHEUS_METRICS_EXPORT_PORT_RANGE = range(81, 90)
PROMETHEUS_METRICS_EXPORT_ADDRESS = ""


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

#AUTH_PASSWORD_VALIDATORS = [
#    {
#        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
#    },
#    {
#        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#    },
#    {
#        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#    },
#    {
#        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
#    },
#]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = os.getenv('TZ', 'UTC')

USE_I18N = True

USE_L10N = True

USE_TZ = True

SITE_ID = 1

IDEMPOTENCY_KEY = {
    # Specify the key encoder class to be used for idempotency keys.
    # If not specified then defaults to 'idempotency_key.encoders.BasicKeyEncoder'
    'ENCODER_CLASS': 'idempotency_key.encoders.BasicKeyEncoder',

    # Set the response code on a conflict.
    # If not specified this defaults to HTTP_409_CONFLICT
    # If set to None then the original request's status code is used.
    'CONFLICT_STATUS_CODE': status.HTTP_409_CONFLICT,

    # Allows the idempotency key header sent from the client to be changed
    'HEADER': 'HTTP_IDEMPOTENCY_KEY',

    'STORAGE': {
        # Specify the storage class to be used for idempotency keys
        # If not specified then defaults to 'idempotency_key.storage.MemoryKeyStorage'
        'CLASS': 'idempotency_key.storage.CacheKeyStorage',

        # Name of the django cache configuration to use for the CacheStorageKey storage
        # class.
        # This can be overriden using the @idempotency_key(cache_name='MyCacheName')
        # view/viewset function decorator.
        'CACHE_NAME': 'default',

        # When the response is to be stored you have the option of deciding when this
        # happens based on the responses status code. If the response status code
        # matches one of the statuses below then it will be stored.
        # The statuses below are the defaults used if this setting is not specified.
        'STORE_ON_STATUSES': [
            status.HTTP_200_OK,
            status.HTTP_201_CREATED,
            status.HTTP_202_ACCEPTED,
            status.HTTP_203_NON_AUTHORITATIVE_INFORMATION,
            status.HTTP_204_NO_CONTENT,
            status.HTTP_205_RESET_CONTENT,
            status.HTTP_206_PARTIAL_CONTENT,
            status.HTTP_207_MULTI_STATUS,
        ]
    },

    # The following settings deal with the process/thread lock that can be placed around the cache storage object
    # to ensure that multiple threads do not try to call the same view/viewset method at the same time.
    'LOCK': {
        # Specify the key object locking class to be used for locking access to the cache storage object.
        # If not specified then defaults to 'idempotency_key.locks.basic.ThreadLock'
        'CLASS': 'idempotency_key.locks.redis.MultiProcessRedisLock',

        # Location of the Redis server if MultiProcessRedisLock is used otherwise this is ignored.
        # The host name can be specified or both the host name and the port separated by a colon ':'
        'LOCATION': os.getenv('IDEMPOTENCY_KEY_LOCK_LOCATION', 'redis://redis:6379'),

        # The unique name to be used across processes for the lock. Only used by the MultiProcessRedisLock class
        'NAME': os.getenv('IDEMPOTENCY_KEY_LOCK_NAME', 'APISLock'),

        # The maximum time to live for the lock. If a lock is given and is never released this timeout forces the release
        # The lock time is in seconds and the default is None which means lock until it is manually released
        'TTL': None,

        # The use of a lock around the storage object so that only one thread at a time can access it.
        # By default this is set to true. WARNING: setting this to false may allow duplicate calls to occur if the timing
        # is right.
        'ENABLE': True,

        # If the ENABLE_LOCK setting is True above then this represents the timeout (in seconds as a floating point number)
        # to occur before the thread gives up waiting. If a timeout occurs the middleware will return a HTTP_423_LOCKED
        # response.
        'TIMEOUT': 0.1,
    },

}

MAINTENANCE_MODE_STATE_FILE_PATH = "/app/fm_eventmanager/maintenance_mode_state.txt"
MAINTENANCE_MODE_IGNORE_ADMIN_SITE = True
MAINTENANCE_MODE_IGNORE_URLS = ("^/u2f/",)

LOGIN_REDIRECT_URL = 'u2f:two-factor-settings'
LOGIN_URL = 'u2f:login'

INTERNAL_IPS = ['127.0.0.1']

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = '/app/apis/static/'

# Session Management
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 60*60*24  # 24hr

# Default email to display as part of error messages
APIS_DEFAULT_EMAIL = os.getenv('APIS_DEFAULT_EMAIL', "registration@example.com")
APIS_DEALER_HEAD = os.getenv('APIS_DEALER_HEAD', "marketplace@example.com")
APIS_STAFF_HEAD = os.getenv('APIS_STAFF_HEAD', "staff@example.com")

# Sandbox values - DEPRECATED
AUTHNET_NAME = ''
AUTHNET_TRANSACTIONKEY = ''

# Sandbox values = DO NOT check in production ids
SQUARE_APPLICATION_ID = os.environ['SQUARE_APPLICATION_ID']
SQUARE_ACCESS_TOKEN = os.environ['SQUARE_ACCESS_TOKEN']
SQUARE_LOCATION_ID = os.environ['SQUARE_LOCATION_ID']
SQUARE_CURRENCY = os.getenv('SQUARE_CURRENCY', 'USD')
SQUARE_ENVIRONMENT = os.getenv('SQUARE_ENVIRONMENT', 'production')  # Or "sandbox"

# Sandbox values - DO NOT check in production credentials
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST = os.getenv('EMAIL_HOST', 'localhost')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', '25'))
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = eval_bool(os.getenv('EMAIL_USE_TLS', 'True'))

# Return channel for Android register application
REGISTER_KEY = os.environ['REGISTER_KEY']

# Print handler for cash drawer and receipts
REGISTER_ENDPOINT = os.getenv('REGISTER_ENDPOINT') # Use default site
REGISTER_PRINTER_URI = os.environ['REGISTER_PRINTER_URI'] # 'https://print.example.com:5000'
REGISTER_DEFAULT_WEBVIEW = os.getenv('REGISTER_DEFAULT_WEBVIEW', "https://www.example.com/code-of-conduct-embed/")
REGISTER_SQUARE_LOCATION = os.getenv('REGISTER_SQUARE_LOCATION', SQUARE_LOCATION_ID)
REGISTER_FORCE_LOCATION = eval_bool(os.getenv('REGISTER_FORCE_LOCATION', 'True'))

# Firebase/Pushy.me cloud-push API key
CLOUD_MESSAGING_KEY = os.getenv('CLOUD_MESSAGING_KEY')

# Cron metrics recording provider and settings
METRICS_BACKEND = "InfluxDBReporter"
METRICS_SETTINGS = {
    "database" : "apis",
}

# MQTT for cash-drawer worker
MQTT_BROKER = {
    "host": "localhost",
    "port": 1883,
    "keepalive": 60,
}

MQTT_LOGIN = {
    "username": "printing",
    "password": "secret",
}

# This URL is passed to browsers to connect to MQTT over websockets for push messages
MQTT_EXTERNAL_BROKER = os.getenv('MQTT_EXTERNAL_BROKER', '/mqtt')

MQTT_JWT_SECRET = os.getenv('MQTT_JWT_SECRET')
MQTT_JWT_ALGORITHM = os.getenv('MQTT_JWT_ALGORITHM', 'HS256')

ENVIRONMENT_NAME = os.getenv('ENVIRONMENT_NAME', "Production Server")
ENVIRONMENT_COLOR = os.getenv('ENVIRONMENT_COLOR', "#FF0000")
ENVIRONMENT_TEXT_COLOR = os.getenv('ENVIRONMENT_TEXT_COLOR', "#00FF00")
ENVIRONMENT_FLOAT = os.getenv('ENVIRONMENT_FLOAT', False)
