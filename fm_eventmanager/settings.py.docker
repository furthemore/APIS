"""
Django settings for fm_eventmanager project.

Generated by 'django-admin startproject' using Django 1.9.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import logging

eval_bool = lambda x: x.lower() in ('true', '1', 't', 'y', 'yes')

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['DJANGO_SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', False)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler'
        },
    },
    'loggers': {
        '': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
    },
}

# Get loglevel from env
LOGLEVEL = os.getenv('DJANGO_LOGLEVEL', 'info').upper()

ADMINS = [('Carissa Brittain', 'carissa.brittain@gmail.com'),]
SERVER_EMAIL = os.getenv("DJANGO_SERVER_EMAIL", "it_errors@furthemore.org")

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'flat_responsive',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'widget_tweaks',
    'mathfilters',
    'nested_inline',
    'import_export',
    'django_extensions',
    'django_u2f',
    'argonauts',
    'maintenance_mode',
    'registration',
    'debug_toolbar',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'maintenance_mode.middleware.MaintenanceModeMiddleware'
]

ROOT_URLCONF = 'fm_eventmanager.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'maintenance_mode.context_processors.maintenance_mode',
                'registration.context_processors.square_environment',
            ],
        },
    },
]

WSGI_APPLICATION = 'fm_eventmanager.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DATABASE_NAME', 'apis'),
        'USER': os.getenv('DATABASE_USER', 'apis'),
        'PASSWORD': os.getenv('DATABASE_PASS', 'secret'),
        'HOST': os.getenv('DATABASE_HOST'),
        'PORT': os.getenv('DATABASE_PORT', ''),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

#AUTH_PASSWORD_VALIDATORS = [
#    {
#        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
#    },
#    {
#        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#    },
#    {
#        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#    },
#    {
#        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
#    },
#]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = os.getenv('TZ', 'UTC')

USE_I18N = True

USE_L10N = True

USE_TZ = True

SITE_ID = 1

MAINTENANCE_MODE_STATE_FILE_PATH = "/app/fm_eventmanager/maintenance_mode_state.txt"
MAINTENANCE_MODE_IGNORE_ADMIN_SITE = True
MAINTENANCE_MODE_IGNORE_URLS = ("^/u2f/",)

LOGIN_REDIRECT_URL = 'u2f:two-factor-settings'
LOGIN_URL = 'u2f:login'

INTERNAL_IPS = ['127.0.0.1']

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = '/app/apis/static/'

# Session Management
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 60*60  # 1hr

# Default email to display as part of error messages
APIS_DEFAULT_EMAIL = os.getenv('APIS_DEFAULT_EMAIL', "registration@example.com")
APIS_DEALER_HEAD = os.getenv('APIS_DEALER_HEAD', "marketplace@example.com")
APIS_STAFF_HEAD = os.getenv('APIS_STAFF_HEAD', "staff@example.com")

# Sandbox values - DEPRECATED
AUTHNET_NAME = ''
AUTHNET_TRANSACTIONKEY = ''

# Sandbox values = DO NOT check in production ids
SQUARE_APPLICATION_ID = os.environ['SQUARE_APPLICATION_ID']
SQUARE_ACCESS_TOKEN = os.environ['SQUARE_ACCESS_TOKEN']
SQUARE_LOCATION_ID = os.environ['SQUARE_LOCATION_ID']
SQUARE_CURRENCY = os.getenv('SQUARE_CURRENCY', 'USD')
SQUARE_ENVIRONMENT = os.getenv('SQUARE_ENVIRONMENT', 'production')  # Or "sandbox"

# Sandbox values - DO NOT check in production credentials
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'localhost')
EMAIL_HOST_USER = os.environ['EMAIL_HOST_USER']
EMAIL_HOST_PASSWORD = os.environ['EMAIL_HOST_PASSWORD']

# Return channel for Android register application
REGISTER_KEY = os.environ['REGISTER_KEY']

# Print handler for cash drawer and receipts
REGISTER_ENDPOINT = os.getenv('REGISTER_ENDPOINT') # Use default site
REGISTER_PRINTER_URI = os.environ['REGISTER_PRINTER_URI'] # 'https://print.example.com:5000'
REGISTER_DEFAULT_WEBVIEW = os.getenv('REGISTER_DEFAULT_WEBVIEW', "https://www.furthemore.org/code-of-conduct-embed/")
REGISTER_SQUARE_LOCATION = os.getenv('REGISTER_SQUARE_LOCATION', SQUARE_LOCATION_ID)
REGISTER_FORCE_LOCATION = eval_bool(os.getenv('REGISTER_FORCE_LOCATION', 'True'))


# Firebase/Pushy.me cloud-push API key
CLOUD_MESSAGING_KEY = os.getenv('CLOUD_MESSAGING_KEY')

# Cron metrics recording provider and settings
METRICS_BACKEND = "InfluxDBReporter"
METRICS_SETTINGS = {
    "database" : "apis",
}

# MQTT for cash-drawer worker
MQTT_BROKER = {
    "host": "localhost",
    "port": 1883,
    "keepalive": 60,
}

MQTT_LOGIN = {
    "username": "printing",
    "password": "secret",
}
